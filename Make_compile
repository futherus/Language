BIN:= bin

SRCFLDR:= code
LOGFLDR:= logs
OBJFLDR:= inter

SRC:=     simple

CODE:=   $(SRCFLDR)/$(SRC).blr
TREE:=   $(OBJFLDR)/$(SRC).tree
ASM:=    $(OBJFLDR)/$(SRC).a
TARGET:= $(OBJFLDR)/$(SRC).exec
TRANSP:= $(SRCFLDR)/$(SRC)_T.blr

all: frontend backend asm cpu
	
compile: frontend backend asm

run: cpu

t-compile: detransp c-compile

c-compile: backend asm

frontend: | $(OBJFLDR) $(LOGFLDR)
	$(BIN)/frontend --src $(CODE) --dst $(TREE)
backend: | $(OBJFLDR) $(LOGFLDR)
	$(BIN)/backend --src $(TREE) --dst $(ASM)
backend_elf: | $(OBJFLDR) $(LOGFLDR)
	$(BIN)/backend_elf --src $(TREE) --dst $(ASM)
asm: | $(OBJFLDR) $(LOGFLDR)
	$(BIN)/assembler --src $(ASM) --dst $(TARGET)
cpu: | $(OBJFLDR) $(LOGFLDR)
	$(BIN)/cpu --src $(TARGET) 
# < $(SRCFLDR)/input.txt

transp: | $(OBJFLDR) $(LOGFLDR)
	$(BIN)/transpiler --src $(TREE) --dst $(TRANSP)
detransp: | $(OBJFLDR) $(LOGFLDR)
	$(BIN)/frontend --src $(TRANSP) --dst $(TREE)

$(LOGFLDR):
	mkdir $@

$(OBJFLDR):
	mkdir $@

clean:
	rm -rf $(OBJFLDR)/*.* $(LOGFLDR)/*.*